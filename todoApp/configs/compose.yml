services:
  # バックエンドの設定
  go:
    # 表示されるコンテナ名
    container_name: back-end
    # ビルドする際の設定
    build:
      # 同階層のDockerfileという名前のファイルを使用してイメージをビルドする
      # イメージのビルドコンテキストとして、現在のディレクトリを指定する 
      context: .
      dockerfile: Dockerfile
      # <Host Port>:<Container Port>なので、ホスト側のポート番号が8080で、コンテナ側を8080として設定
      ports:
        - '8080:8080'
  # フロントエンドの設定
  nginx:
      # 表示されるコンテナ名
      container_name: front-end
      image: nginx
      # <Host Port>:<Container Port>なので、ホスト側のポート番号が3000で、コンテナ側を3000として設定
      ports:
        - "3000:3000"
      # コンテナ内で読み込む環境ファイルの階層とファイル名を指定する
      env_file:
        - ../web/.env
  # データベースの設定
  db:
    image: postgres:14
    # 表示されるコンテナ名
    container_name: postgres-db
    # <Host Port>:<Container Port>なので、ホスト側のポート番号が5432で、コンテナ側を5432として設定
    ports:
      - 5432:5432
    volumes:
    # db-storeは最下部のvolumesで定義している名前を使用している
    # 例えDBのコンテナを消してしまっても、データを別場所にて保管しているので、復元できる
      - db-store:/var/lib/postgresql/data
      - ./script:/docker-entrypoint-initdb.d
    # コンテナ内で使用できる環境変数を設定
    environment:
      - TZ=Asia/Tokyo
      - POSTGRES_DATABASE=$POSTGRES_DB
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_USER=$POSTGRES_USER
    # コンテナ内で読み込む環境ファイルの階層とファイル名を指定する
    env_file:
      - .env
# volumesによりボリュームが作成される
# もし既に名前を付けているボリュームをvolumesにて指定すると、その名前の付いたボリュームからデータを参照する
# dbセクションで使用している[db-store]ボリュームの『データを永続化()』できる
volumes:
  db-store:
